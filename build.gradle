buildscript {
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
    repositories {
        maven {
            url 'https://sonatype.netifiinc.com/repository/netifi-plugin-group/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.8.1"
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.6.2'
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.0.2' // declare before any other plugin
    id 'io.spring.dependency-management' version '1.0.7.RELEASE' apply false
    id "com.github.hierynomus.license" version '0.15.0'
    id 'com.palantir.git-version' version '0.12.0-rc2'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}


// TODO: make this a Gradle plugin someday
def details = versionDetails()
def versionSuffix = ""
def buildNumber = "${System.getenv("BUILD_NUMBER") ?: "dev"}"
def tmpUniqueVersion = "${project.version}"

if (details.branchName != null) {
    if (details.branchName == "master") {
        // Master should never have a postfix
    } else if (details.branchName == "develop") {
        versionSuffix = "-SNAPSHOT"
        tmpUniqueVersion += "-${buildNumber}-SNAPSHOT"
    } else if (details.branchName.startsWith("release")) {
        versionSuffix = "-${buildNumber}-RC"
        tmpUniqueVersion += "-${buildNumber}-RC"
    } else {
        versionSuffix = "-${details.branchName.replace("/", "-")}-SNAPSHOT"
        tmpUniqueVersion += "-${details.branchName.replace("/", "-")}-${buildNumber}-SNAPSHOT"
    }
}


allprojects {
    dependencyLocking {
        lockAllConfigurations()
    }

    repositories {
        maven {
            url 'https://sonatype.netifiinc.com/repository/jcenter/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/maven-central/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/netifi-oss/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/netifi-maven-releases/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/netifi-maven-snapshots/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/spring-libs-snapshot/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/jcenter-oss-snapshot/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
        maven {
            url 'https://sonatype.netifiinc.com/repository/jcenter-oss-release/'
            credentials {
                username = "${netifiReadOnlyUsername}"
                password = "${netifiReadOnlyPassword}"
            }
        }
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.google.osdetector'
    apply from: '../dependency-management.gradle'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileTestJava {
        sourceCompatibility = 11
        targetCompatibility = 11
    }

    project.version += versionSuffix
    ext {
        uniqueVersion = "${tmpUniqueVersion}"
    }

    // Build Source Jarst
    def sourcesJarMap = [name: 'sourcesJar', type: Jar, dependsOn: classes]
    project.tasks.create(sourcesJarMap, {
        classifier = 'sources'
        from sourceSets.main.allSource
        version = "${project.version}"
    })

    // Build Javadoc Jars
    def javadocJarMap = [name: 'javadocJar', type: Jar, dependsOn: javadoc]
    project.tasks.create(javadocJarMap, {
        classifier = 'javadoc'
        from javadoc.destinationDir
        version = "${project.version}"
    })

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    task allDeps(type: DependencyReportTask) {}
}

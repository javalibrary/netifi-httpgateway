plugins {
    id 'application'
    id 'maven-publish'
    id 'com.bmuschko.docker-java-application' version '4.5.0'
//    id 'com.gorylenko.gradle-git-properties' version '2.0.0'
    id 'com.palantir.git-version'
    id 'com.google.protobuf' version '0.8.8'
}

ext {
    commonJvmArgs = [
            '-XX:+IgnoreUnrecognizedVMOptions',
            '-XshowSettings:vm',
            '-XX:+UseG1GC',
            '-XX:MaxGCPauseMillis=200',
            '-XX:+AlwaysPreTouch',
            '-XX:+UseStringDeduplication',
            '-XX:+ExplicitGCInvokesConcurrent',
            '-XX:+ParallelRefProcEnabled',
            '-XX:+UnlockExperimentalVMOptions',
            '-XX:+UseCGroupMemoryLimitForHeap',
            '-XX:InitialRAMPercentage=70',
            '-XX:MaxRAMPercentage=70',
            '-Xlog:gc:gc.log::filecount=10,filesize=100M',
            '-DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector'
    ]
}



jar {
    manifest {
        attributes(
                'Main-Class':             "${mainClassName}",
                'Implementation-Title':   "${project.name}",
                'Implementation-Version': "${project.version}",
                'Implementation-Vendor':  "Netifi Inc."
        )
    }
}

mainClassName = 'com.netifi.httpgateway.Main'

// Properties
application {
    mainClassName = "com.netifi.httpgateway.Main"
    applicationDefaultJvmArgs = ['-Xlog:gc:gc.log::filecount=10,filesize=100M'].plus(project.ext.commonJvmArgs)
}

dependencies {
    compile project(':netifi-httpgateway-idl')

    compile ('org.springframework.boot:spring-boot-starter') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    compile "com.netifi:netifi-metrics-micrometer"

    compile "com.google.protobuf:protobuf-java"
    compile "com.google.protobuf:protobuf-java-util"

    compile "org.apache.logging.log4j:log4j-api"
    compile "org.apache.logging.log4j:log4j-core"
    compile "org.apache.logging.log4j:log4j-slf4j-impl"

    compile "com.lmax:disruptor"

    compile 'io.projectreactor.addons:reactor-extra'

    protobuf "io.rsocket.rpc:rsocket-rpc-protobuf-idl"

    testCompile 'junit:junit'
    testCompile 'commons-io:commons-io'
    testCompile 'io.projectreactor:reactor-test'

}


protobuf {
    generatedFilesBaseDir = "${projectDir}/src/generated"

    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        rsocketRpc {
            artifact = "io.rsocket.rpc:rsocket-rpc-protobuf:${rsocketRpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            // Recompile protos when build.gradle has been changed, because
            // it's possible the version of protoc has been changed.
            task.inputs.file "${rootProject.projectDir}/build.gradle"
            task.plugins {
                rsocketRpc {}
            }

            // Generate a descriptor
            task.generateDescriptorSet = true
            task.descriptorSetOptions.path =
                    "${projectDir}/build/descriptors/${task.sourceSet.name}.dsc"
            task.descriptorSetOptions.includeSourceInfo = true
            task.descriptorSetOptions.includeImports = true
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}


idea {
    module {
        sourceDirs += file("src/test/proto")
        sourceDirs += file("src/generated/test/java")
        sourceDirs += file("src/generated/test/rsocketRpc")

        generatedSourceDirs += file('src/generated/test/java')
        generatedSourceDirs += file('src/generated/test/rsocketRpc')

    }
}

test {
    exclude 'com/netifi/demo/**'
}

applicationDefaultJvmArgs = [
        '-XX:+IgnoreUnrecognizedVMOptions',
        '-XshowSettings:vm',
        '-XX:+UseG1GC',
        '-XX:MaxGCPauseMillis=200',
        '-XX:+AlwaysPreTouch',
        '-XX:+UseStringDeduplication',
        '-XX:+ExplicitGCInvokesConcurrent',
        '-XX:+ParallelRefProcEnabled',
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:+UseCGroupMemoryLimitForHeap',
        '-XX:InitialRAMPercentage=70',
        '-XX:MaxRAMPercentage=70',
        '-Xlog:gc:gc.log::filecount=10,filesize=100M',
        '-DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector'
]

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute module('com.google.guava:guava') with module('com.google.guava:guava:22.0')
        }
    }
}

configurations {
    providedRuntime
    compile.exclude(group: 'ch.qos.logback')
}



// Docker Publishing
import com.bmuschko.gradle.docker.tasks.image.*

//docker {
//    registryCredentials {
//        if (version.endsWith('SNAPSHOT') || version.endsWith('RC')) {
//            // Private Docker Repo
//            url = 'https://netifi.azurecr.io'
//            username = "${netifiPrivateDockerRegistryUsername}"
//            password = "${netifiPrivateDockerRegistryPassword}"
//        } else {
//            // Public Docker Repo
//            username = "${netifiDockerHubUsername}"
//            password = "${netifiDockerHubPassword}"
//        }
//    }
//}

task buildImage(type: DockerBuildImage, dependsOn: build) {
    dockerFile = new File("${projectDir}/src/docker/Dockerfile")
    inputDir = new File("${projectDir}")

    if (version.endsWith('SNAPSHOT') || version.endsWith('RC')) {
        tags = [ "netifi.azurecr.io/netifi-httpgateway:${artifactVersion}".toString() ]
    } else {
        if (project.hasProperty('tagLatest') && project.property('tagLatest').toBoolean()) {
            tags = [ 'netifi/netifi-httpgateway:latest', "netifi/netifi-httpgateway:${version}".toString() ]
        } else {
            tags = [ "netifi/netifi-httpgateway:${version}".toString() ]
        }
    }
}

task pushImage(type: DockerPushImage, dependsOn: buildImage) {
    if (version.endsWith('SNAPSHOT') || version.endsWith('RC')) {
        imageName = "netifi.azurecr.io/netifi-httpgateway"
    } else {
        imageName = "netifi/netifi-httpgateway"
    }
}

// Docker Configuration
task createDockerStartScripts(type: CreateStartScripts) {
    mainClassName = startScripts.mainClassName
    classpath = startScripts.classpath
    outputDir = new File("${buildDir}/dockerStartScripts")
    optsEnvironmentVar = startScripts.optsEnvironmentVar
    applicationName = "${application.applicationName}-docker"
    defaultJvmOpts = [
            "-Dio.netty.native.workdir=/opt/netifi/${project.name}-tmp",
            "-Dnetifi.broker.accessKeyStorePath=/opt/netifi/${project.name}-tmp",
            "-Xlog:gc:/opt/netifi/${project.name}-tmp/gc.log::filecount=10,filesize=100M",
            '-XX:+UseCGroupMemoryLimitForHeap',
            "-XX:HeapDumpPath=/opt/netifi/${project.name}-tmp"
    ].plus(project.ext.commonJvmArgs)
}

build.dependsOn createDockerStartScripts


// Code Deploy Configuration
task createCodeDeployStartScripts(type: CreateStartScripts) {
    mainClassName = startScripts.mainClassName
    classpath = startScripts.classpath
    outputDir = new File("${buildDir}/codeDeployStartScripts")
    applicationName = "${application.applicationName}-codedeploy"
    optsEnvironmentVar = startScripts.optsEnvironmentVar
    defaultJvmOpts = [
            "-Xlog:gc:/opt/netifi/${project.name}-codedeploy-${project.version}-tmp/gc.log::filecount=10,filesize=100M",
            '-Xms256m',
            '-Xmx256m',
            "-XX:HeapDumpPath=/opt/netifi/${project.name}-codedeploy-${project.version}-tmp",
            '-XX:MaxDirectMemorySize=256m',
            '-XX:MaxMetaspaceSize=64m',
            '-XX:MetaspaceSize=64m',
            '-XX:MaxRAM=650m'
    ].plus(project.ext.commonJvmArgs)
}

build.dependsOn createCodeDeployStartScripts

task copyTemplates(type: Copy) {
    from 'src/codeDeploy'
    into "$buildDir/codeDeploy"
    rename 'systemd.service', "netifi-${project.name}.service"
    expand(project: project)
}

distributions {
    main {
        baseName = "${application.applicationName}"
    }
    docker {
        baseName = "${application.applicationName}-docker"
        contents {
            from (jar) {
                into 'lib'
            }
            from (configurations.runtime) {
                into 'lib'
            }
            from ("${projectDir}/src/dist")
            from (createDockerStartScripts) {
                into 'bin'
                fileMode = 0755
            }
        }
    }
    codeDeploy {
        baseName = "${application.applicationName}-codedeploy"
        contents {
            from (copyTemplates) {
                into '/'
            }
            from (configurations.runtime) {
                into 'lib'
            }
            from (jar) {
                into 'lib'
            }
            from ("${projectDir}/src/dist")
            from (createCodeDeployStartScripts) {
                into 'bin'
                fileMode = 0755
            }
        }
    }
}

dockerDistTar {
    version = ''
}

dockerDistZip {
    enabled = false
}

codeDeployDistTar {
    enabled = false
}

codeDeployDistZip {
    destinationDirectory = new File("${project.buildDir}/${project.distsDirName}/codedeploy")
}